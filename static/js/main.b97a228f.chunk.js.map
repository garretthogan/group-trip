{"version":3,"sources":["Expense.js","App.js","serviceWorker.js","index.js"],"names":["Expense","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","key","event","setState","defineProperty","target","value","toggleShowClaimInput","prevState","showClaimInput","toggle","addNewClaim","onClaimAdded","_this$state","state","newClaimMessage","newClaimPayment","newClaimQuantity","remainingQuantity","message","payment","claimQuantity","claimedBy","showClaims","quantity","_this$props","name","cost","claims","createdBy","classes","remainingBalance","_this$state2","react_default","a","createElement","index_es","onClick","title","subheader","avatar","in","style","padding","map","claim","i","className","input","fullWidth","label","onChange","type","placeholder","button","variant","actions","Assignment_default","AttachMoney_default","Component","withStyles","theme","paddingTop","float","App","addNewExpense","newExpenseCost","newExpenseName","newExpenseQuantity","expenses","showCreateExpenseInput","concat","toConsumableArray","handleNewClaim","expense","index","updatedClaims","updatedExpense","objectSpread","splice","_this2","container","margin","color","expenseContainer","src_Expense","assign","position","appBar","toolbar","aria-label","fabButton","paddingBottom","paddingLeft","paddingRight","top","bottom","alignItems","justifyContent","zIndex","left","right","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b97a228f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  TextField,\n  Button,\n  withStyles,\n  Collapse,\n  CardActions,\n  Avatar,\n  IconButton\n} from '@material-ui/core';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport AttachMoneyOutlined from '@material-ui/icons/AttachMoney';\n\n/**\n * To do:\n * hook up to real data\n * add snackbar notification\n */\n\nconst styles = theme => ({\n  button: {\n    paddingTop: 12\n  },\n  input: {\n    paddingTop: 8\n  },\n  actions: {\n    float: 'right'\n  }\n});\n\nclass Expense extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showClaimInput: false,\n      showClaims: false,\n      newClaimMessage: '',\n      newClaimPayment: 0,\n      newClaimQuantity: 0,\n      remainingQuantity: props.quantity\n    };\n  }\n  handleInput = key => event => {\n    this.setState({ [key]: event.target.value });\n  };\n  toggleShowClaimInput = () => {\n    this.setState(prevState => ({ showClaimInput: !prevState.showClaimInput }));\n  };\n  toggleShowClaimInput = () => {\n    this.setState(prevState => ({ showClaimInput: !prevState.showClaimInput }));\n  };\n  toggle = key => () => {\n    this.setState(prevState => ({ [key]: !prevState[key] }));\n  };\n  addNewClaim = () => {\n    const { onClaimAdded } = this.props;\n    const {\n      newClaimMessage,\n      newClaimPayment,\n      newClaimQuantity,\n      remainingQuantity\n    } = this.state;\n\n    if (onClaimAdded) {\n      onClaimAdded({\n        message: newClaimMessage,\n        payment: newClaimPayment,\n        claimQuantity: newClaimQuantity,\n        claimedBy: 'gret'\n      });\n    }\n\n    this.setState({\n      newClaimMessage: '',\n      newClaimPayment: 0,\n      newClaimQuantity: 0,\n      showClaimInput: false,\n      remainingQuantity: remainingQuantity - newClaimQuantity\n    });\n  };\n  render() {\n    const {\n      name,\n      cost,\n      quantity,\n      claims,\n      createdBy,\n      classes,\n      remainingBalance\n    } = this.props;\n    const {\n      newClaimMessage,\n      newClaimPayment,\n      newClaimQuantity,\n      showClaimInput,\n      showClaims,\n      remainingQuantity\n    } = this.state;\n\n    return (\n      <Card>\n        <CardHeader\n          onClick={this.toggle('showClaimInput')}\n          title={name}\n          subheader={createdBy}\n          avatar={<Avatar />}\n        />\n        <CardContent>\n          <div>Total cost: ${cost}</div>\n          <div>Remaining cost: ${remainingBalance}</div>\n          <div>Total quantity: {quantity}</div>\n          <div>Remaining quantity: {remainingQuantity}</div>\n        </CardContent>\n        <Collapse in={showClaims}>\n          <CardContent onClick={this.toggle('showClaims')}>\n            <div style={{ padding: 4 }}>\n              {claims.map((claim, i) => (\n                <div key={i}>\n                  {claim.claimQuantity} {claim.message} ${claim.payment} -{' '}\n                  {claim.claimedBy}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Collapse>\n        <Collapse in={showClaimInput}>\n          <CardContent>\n            <div className={classes.input}>\n              <TextField\n                fullWidth\n                label=\"Quantity\"\n                onChange={this.handleInput('newClaimQuantity')}\n                value={newClaimQuantity}\n                type=\"number\"\n              />\n            </div>\n            <div className={classes.input}>\n              <TextField\n                fullWidth\n                label=\"Message\"\n                onChange={this.handleInput('newClaimMessage')}\n                value={newClaimMessage}\n                placeholder=\"Badge me bro\"\n              />\n            </div>\n            <div className={classes.input}>\n              <TextField\n                fullWidth\n                label=\"Payment\"\n                onChange={this.handleInput('newClaimPayment')}\n                value={newClaimPayment}\n                type=\"number\"\n              />\n            </div>\n            <div className={classes.button}>\n              <Button fullWidth variant=\"outlined\" onClick={this.addNewClaim}>\n                Claim\n              </Button>\n            </div>\n          </CardContent>\n        </Collapse>\n        <CardActions className={classes.actions}>\n          {!showClaimInput && !showClaims && (\n            <div>\n              <IconButton onClick={this.toggle('showClaims')}>\n                <AssignmentIcon />\n              </IconButton>\n              <IconButton onClick={this.toggle('showClaimInput')}>\n                <AttachMoneyOutlined />\n              </IconButton>\n            </div>\n          )}\n        </CardActions>\n      </Card>\n    );\n  }\n}\n\nexport default withStyles(styles)(Expense);\n","import React, { Component } from 'react';\nimport {\n  Button,\n  TextField,\n  AppBar,\n  Toolbar,\n  Fab,\n  Collapse\n} from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport AttachMoneyOutlined from '@material-ui/icons/AttachMoney';\nimport Expense from './Expense';\n\nconst styles = theme => ({\n  container: {\n    paddingTop: 4,\n    paddingBottom: 4,\n    paddingLeft: 12,\n    paddingRight: 12\n  },\n  button: {\n    paddingTop: 4,\n    float: 'right'\n  },\n  expenseContainer: {\n    paddingTop: 12\n  },\n  appBar: {\n    top: 'auto',\n    bottom: 0\n  },\n  toolbar: {\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  fabButton: {\n    position: 'absolute',\n    zIndex: 1,\n    top: -30,\n    left: 0,\n    right: 0,\n    margin: '0 auto'\n  }\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showCreateExpenseInput: false,\n      newExpenseName: '',\n      newExpenseCost: 0,\n      newExpenseQuantity: 0,\n      expenses: []\n    };\n  }\n  toggle = key => () => {\n    this.setState(prevState => ({ [key]: !prevState[key] }));\n  };\n  handleInput = key => event => {\n    this.setState({ [key]: event.target.value });\n  };\n  addNewExpense = () => {\n    const {\n      newExpenseCost,\n      newExpenseName,\n      newExpenseQuantity,\n      expenses\n    } = this.state;\n    this.setState({\n      showCreateExpenseInput: false,\n      newExpenseCost: 0,\n      newExpenseName: '',\n      newExpenseQuantity: 0,\n      expenses: [\n        ...expenses,\n        {\n          createdBy: 'gret',\n          cost: newExpenseCost,\n          name: newExpenseName,\n          remainingBalance: newExpenseCost,\n          quantity: newExpenseQuantity,\n          claims: []\n        }\n      ]\n    });\n  };\n  handleNewClaim = (expense, index) => claim => {\n    const { expenses } = this.state;\n\n    const updatedClaims = [...expense.claims, claim];\n\n    const updatedExpense = {\n      ...expense,\n      remainingBalance: expense.remainingBalance - claim.payment,\n      claims: updatedClaims\n    };\n\n    expenses.splice(index, 1, updatedExpense);\n    this.setState({\n      expenses\n    });\n  };\n  render() {\n    const { classes } = this.props;\n    const {\n      newExpenseName,\n      newExpenseCost,\n      newExpenseQuantity,\n      expenses,\n      showCreateExpenseInput\n    } = this.state;\n    return (\n      <div className={classes.container}>\n        <Collapse in={showCreateExpenseInput}>\n          <TextField\n            fullWidth\n            label=\"Expense Name\"\n            placeholder=\"PAX Badges\"\n            value={newExpenseName}\n            onChange={this.handleInput('newExpenseName')}\n            margin=\"normal\"\n          />\n          <TextField\n            fullWidth\n            label=\"Quantity\"\n            type=\"number\"\n            onChange={this.handleInput('newExpenseQuantity')}\n            value={newExpenseQuantity}\n            margin=\"normal\"\n          />\n          <TextField\n            fullWidth\n            label=\"Cost\"\n            type=\"number\"\n            onChange={this.handleInput('newExpenseCost')}\n            value={newExpenseCost}\n            margin=\"normal\"\n          />\n          <div className={classes.button}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={this.addNewExpense}\n            >\n              Add Expense\n            </Button>\n          </div>\n        </Collapse>\n        {expenses.map((expense, i) => (\n          <div key={i} className={classes.expenseContainer}>\n            <Expense\n              onClaimAdded={this.handleNewClaim(expense, i)}\n              {...expense}\n            />\n          </div>\n        ))}\n        <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n          <Toolbar className={classes.toolbar}>\n            <Fab\n              color=\"secondary\"\n              aria-label=\"Add\"\n              className={classes.fabButton}\n              onClick={this.toggle('showCreateExpenseInput')}\n            >\n              <AttachMoneyOutlined />\n            </Fab>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}