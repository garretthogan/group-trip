{"version":3,"sources":["ExpenseCreator.js","Expense.js","ExpensesList.js","ExpensesPage.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseCreator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","key","event","setState","defineProperty","target","value","handleExpenseAdded","_this$state","state","newExpenseName","newExpenseCost","newExpenseQuantity","onAddExpense","name","cost","quantity","_this$state2","_this$props","classes","showCreateExpenseInput","react_default","a","createElement","index_es","in","fullWidth","label","placeholder","onChange","margin","type","className","button","variant","color","onClick","Component","withStyles","theme","paddingTop","float","Expense","toggleShowClaimInput","prevState","showClaimInput","toggle","addNewClaim","onClaimAdded","newClaimMessage","newClaimPayment","newClaimQuantity","remainingQuantity","message","payment","claimQuantity","claimedBy","showClaims","claims","createdBy","remainingBalance","title","subheader","avatar","style","padding","map","claim","i","input","actions","Assignment_default","AttachMoney_default","ExpenseList","handleClaimAdded","expense","index","onAddNewClaim","_this2","expenses","expenseContainer","src_Expense","assign","ExpensesPage","addNewExpense","_ref2","concat","toConsumableArray","updatedClaims","updatedExpense","objectSpread","splice","container","src_ExpenseCreator","ExpensesList","position","appBar","toolbar","aria-label","fabButton","paddingBottom","paddingLeft","paddingRight","top","bottom","alignItems","justifyContent","zIndex","left","right","App","src_ExpensesPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAUMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,YAAc,SAAAC,GAAG,OAAI,SAAAC,GACnBT,EAAKU,SAALT,OAAAU,EAAA,EAAAV,CAAA,GAAiBO,EAAMC,EAAMG,OAAOC,UATnBb,EAWnBc,mBAAqB,WAAM,IAAAC,EACsCf,EAAKgB,MAA5DC,EADiBF,EACjBE,eAAgBC,EADCH,EACDG,eAAgBC,EADfJ,EACeI,mBAChCC,EAAiBpB,EAAKD,MAAtBqB,aACJA,GACFA,EAAa,CACXC,KAAMJ,EACNK,KAAMJ,EACNK,SAAUJ,IAGdnB,EAAKU,SAAS,CACZQ,eAAgB,EAChBD,eAAgB,GAChBE,mBAAoB,KAtBtBnB,EAAKgB,MAAQ,CACXC,eAAgB,GAChBE,mBAAoB,EACpBD,eAAgB,GALDlB,wEA2BV,IAAAwB,EACwDrB,KAAKa,MAA5DC,EADDO,EACCP,eAAgBC,EADjBM,EACiBN,eAAgBC,EADjCK,EACiCL,mBADjCM,EAEqCtB,KAAKJ,MAAzC2B,EAFDD,EAECC,QAASC,EAFVF,EAEUE,uBACjB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,GAAIL,GACZC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEE,WAAS,EACTC,MAAM,eACNC,YAAY,aACZtB,MAAOI,EACPmB,SAAUjC,KAAKI,YAAY,kBAC3B8B,OAAO,WAETT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEE,WAAS,EACTC,MAAM,WACNI,KAAK,SACLF,SAAUjC,KAAKI,YAAY,sBAC3BM,MAAOM,EACPkB,OAAO,WAETT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEE,WAAS,EACTC,MAAM,OACNI,KAAK,SACLF,SAAUjC,KAAKI,YAAY,kBAC3BM,MAAOK,EACPmB,OAAO,WAETT,EAAAC,EAAAC,cAAA,OAAKS,UAAWb,EAAQc,QACtBZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEU,QAAQ,YACRC,MAAM,YACNC,QAASxC,KAAKW,oBAHhB,wBA1DmB8B,aAuEdC,uBA9EA,SAAAC,GAAK,MAAK,CACvBN,OAAQ,CACNO,WAAY,EACZC,MAAO,WA2EIH,CAAmB/C,qBC/C5BmD,cACJ,SAAAA,EAAYlD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8C,IACjBjD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgD,GAAA3C,KAAAH,KAAMJ,KAURQ,YAAc,SAAAC,GAAG,OAAI,SAAAC,GACnBT,EAAKU,SAALT,OAAAU,EAAA,EAAAV,CAAA,GAAiBO,EAAMC,EAAMG,OAAOC,UAZnBb,EAcnBkD,qBAAuB,WACrBlD,EAAKU,SAAS,SAAAyC,GAAS,MAAK,CAAEC,gBAAiBD,EAAUC,mBAfxCpD,EAiBnBkD,qBAAuB,WACrBlD,EAAKU,SAAS,SAAAyC,GAAS,MAAK,CAAEC,gBAAiBD,EAAUC,mBAlBxCpD,EAoBnBqD,OAAS,SAAA7C,GAAG,OAAI,WACdR,EAAKU,SAAS,SAAAyC,GAAS,OAAAlD,OAAAU,EAAA,EAAAV,CAAA,GAAQO,GAAO2C,EAAU3C,QArB/BR,EAuBnBsD,YAAc,WAAM,IACVC,EAAiBvD,EAAKD,MAAtBwD,aADUxC,EAOdf,EAAKgB,MAJPwC,EAHgBzC,EAGhByC,gBACAC,EAJgB1C,EAIhB0C,gBACAC,EALgB3C,EAKhB2C,iBACAC,EANgB5C,EAMhB4C,kBAGEJ,GACFA,EAAa,CACXK,QAASJ,EACTK,QAASJ,EACTK,cAAeJ,EACfK,UAAW,SAIf/D,EAAKU,SAAS,CACZ8C,gBAAiB,GACjBC,gBAAiB,EACjBC,iBAAkB,EAClBN,gBAAgB,EAChBO,kBAAmBA,EAAoBD,KA5CzC1D,EAAKgB,MAAQ,CACXoC,gBAAgB,EAChBY,YAAY,EACZR,gBAAiB,GACjBC,gBAAiB,EACjBC,iBAAkB,EAClBC,kBAAmB5D,EAAMwB,UARVvB,wEAiDV,IAAAyB,EASHtB,KAAKJ,MAPPsB,EAFKI,EAELJ,KACAC,EAHKG,EAGLH,KACAC,EAJKE,EAILF,SACA0C,EALKxC,EAKLwC,OACAC,EANKzC,EAMLyC,UACAxC,EAPKD,EAOLC,QACAyC,EARK1C,EAQL0C,iBARK3C,EAiBHrB,KAAKa,MANPwC,EAXKhC,EAWLgC,gBACAC,EAZKjC,EAYLiC,gBACAC,EAbKlC,EAaLkC,iBACAN,EAdK5B,EAcL4B,eACAY,EAfKxC,EAeLwC,WACAL,EAhBKnC,EAgBLmC,kBAGF,OACE/B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEY,QAASxC,KAAKkD,OAAO,kBACrBe,MAAO/C,EACPgD,UAAWH,EACXI,OAAQ1C,EAAAC,EAAAC,cAACC,EAAA,EAAD,QAEVH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,2BAAmBR,GACnBM,EAAAC,EAAAC,cAAA,+BAAuBqC,GACvBvC,EAAAC,EAAAC,cAAA,8BAAsBP,GACtBK,EAAAC,EAAAC,cAAA,kCAA0B6B,IAE5B/B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,GAAIgC,GACZpC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaY,QAASxC,KAAKkD,OAAO,eAChCzB,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAAEC,QAAS,IACpBP,EAAOQ,IAAI,SAACC,EAAOC,GAAR,OACV/C,EAAAC,EAAAC,cAAA,OAAKtB,IAAKmE,GACPD,EAAMZ,cADT,IACyBY,EAAMd,QAD/B,KAC0Cc,EAAMb,QADhD,KAC2D,IACxDa,EAAMX,gBAMjBnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,GAAIoB,GACZxB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKS,UAAWb,EAAQkD,OACtBhD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEE,WAAS,EACTC,MAAM,WACNE,SAAUjC,KAAKI,YAAY,oBAC3BM,MAAO6C,EACPpB,KAAK,YAGTV,EAAAC,EAAAC,cAAA,OAAKS,UAAWb,EAAQkD,OACtBhD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEE,WAAS,EACTC,MAAM,UACNE,SAAUjC,KAAKI,YAAY,mBAC3BM,MAAO2C,EACPrB,YAAY,kBAGhBP,EAAAC,EAAAC,cAAA,OAAKS,UAAWb,EAAQkD,OACtBhD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEE,WAAS,EACTC,MAAM,UACNE,SAAUjC,KAAKI,YAAY,mBAC3BM,MAAO4C,EACPnB,KAAK,YAGTV,EAAAC,EAAAC,cAAA,OAAKS,UAAWb,EAAQc,QACtBZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQE,WAAS,EAACQ,QAAQ,WAAWE,QAASxC,KAAKmD,aAAnD,YAMN1B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaQ,UAAWb,EAAQmD,UAC5BzB,IAAmBY,GACnBpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYY,QAASxC,KAAKkD,OAAO,eAC/BzB,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,OAEFD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYY,QAASxC,KAAKkD,OAAO,mBAC/BzB,EAAAC,EAAAC,cAACiD,EAAAlD,EAAD,iBA1IMe,aAoJPC,uBAhKA,SAAAC,GAAK,MAAK,CACvBN,OAAQ,CACNO,WAAY,IAEd6B,MAAO,CACL7B,WAAY,GAEd8B,QAAS,CACP7B,MAAO,WAwJIH,CAAmBI,GC5K5B+B,6MACJC,iBAAmB,SAACC,EAASC,GAAV,OAAoB,SAAAT,GAAS,IACtCU,EAAkBpF,EAAKD,MAAvBqF,cACJA,GACFA,EAAcF,EAASC,EAAOT,6EAGzB,IAAAW,EAAAlF,KAAAsB,EACuBtB,KAAKJ,MAA3BuF,EADD7D,EACC6D,SAAU5D,EADXD,EACWC,QAClB,OACEE,EAAAC,EAAAC,cAAA,WACGwD,EAASb,IAAI,SAACS,EAASP,GAAV,OACZ/C,EAAAC,EAAAC,cAAA,OAAKtB,IAAKmE,EAAGpC,UAAWb,EAAQ6D,kBAC9B3D,EAAAC,EAAAC,cAAC0D,EAADvF,OAAAwF,OAAA,CACElC,aAAc8B,EAAKJ,iBAAiBC,EAASP,IACzCO,eAfQtC,aAwBXC,uBA9BA,SAAAC,GAAK,MAAK,CACvByC,iBAAkB,CAChBxC,WAAY,MA4BDF,CAAmBmC,GCW5BU,cACJ,SAAAA,EAAY3F,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuF,IACjB1F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyF,GAAApF,KAAAH,KAAMJ,KAMRsD,OAAS,SAAA7C,GAAG,OAAI,WACdR,EAAKU,SAAS,SAAAyC,GAAS,OAAAlD,OAAAU,EAAA,EAAAV,CAAA,GAAQO,GAAO2C,EAAU3C,QAR/BR,EAUnB2F,cAAgB,SAAAC,GAA8B,IAA3BtE,EAA2BsE,EAA3BtE,KAAMD,EAAqBuE,EAArBvE,KAAME,EAAeqE,EAAfrE,SACrB+D,EAAatF,EAAKgB,MAAlBsE,SACRtF,EAAKU,SAAS,CACZiB,wBAAwB,EACxB2D,SAAQ,GAAAO,OAAA5F,OAAA6F,EAAA,EAAA7F,CACHqF,GADG,CAEN,CACEpB,UAAW,OACX5C,OACAD,OACA8C,iBAAkB7C,EAClBC,WACA0C,OAAQ,SAtBGjE,EA2BnBsD,YAAc,SAAC4B,EAASC,EAAOT,GAAU,IAC/BY,EAAatF,EAAKgB,MAAlBsE,SAEFS,EAAa,GAAAF,OAAA5F,OAAA6F,EAAA,EAAA7F,CAAOiF,EAAQjB,QAAf,CAAuBS,IAEpCsB,EAAc/F,OAAAgG,EAAA,EAAAhG,CAAA,GACfiF,EADe,CAElBf,iBAAkBe,EAAQf,iBAAmBO,EAAMb,QACnDI,OAAQ8B,IAGVT,EAASY,OAAOf,EAAO,EAAGa,GAC1BhG,EAAKU,SAAS,CACZ4E,cAtCFtF,EAAKgB,MAAQ,CACXW,wBAAwB,EACxB2D,SAAU,IAJKtF,wEA2CV,IACC0B,EAAYvB,KAAKJ,MAAjB2B,QADDX,EAEsCZ,KAAKa,MAA1CsE,EAFDvE,EAECuE,SAAU3D,EAFXZ,EAEWY,uBAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKS,UAAWb,EAAQyE,WACtBvE,EAAAC,EAAAC,cAACsE,EAAD,CACEhF,aAAcjB,KAAKwF,cACnBhE,uBAAwBA,IAE1BC,EAAAC,EAAAC,cAACuE,EAAD,CAAcjB,cAAejF,KAAKmD,YAAagC,SAAUA,IACzD1D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQuE,SAAS,QAAQ5D,MAAM,UAAUH,UAAWb,EAAQ6E,QAC1D3E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASQ,UAAWb,EAAQ8E,SAC1B5E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEW,MAAM,YACN+D,aAAW,MACXlE,UAAWb,EAAQgF,UACnB/D,QAASxC,KAAKkD,OAAO,2BAErBzB,EAAAC,EAAAC,cAACiD,EAAAlD,EAAD,iBA9Dae,aAuEZC,uBAvGA,SAAAC,GAAK,MAAK,CACvBqD,UAAW,CACTpD,WAAY,EACZ4D,cAAe,EACfC,YAAa,GACbC,aAAc,IAEhBrE,OAAQ,CACNO,WAAY,EACZC,MAAO,SAETuC,iBAAkB,CAChBxC,WAAY,IAEdwD,OAAQ,CACNO,IAAK,OACLC,OAAQ,GAEVP,QAAS,CACPQ,WAAY,SACZC,eAAgB,iBAElBP,UAAW,CACTJ,SAAU,WACVY,OAAQ,EACRJ,KAAM,GACNK,KAAM,EACNC,MAAO,EACP/E,OAAQ,YA2EGQ,CAAmB6C,GCjGnB2B,mLARX,OACEzF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwF,EAAD,cAJU1E,aCGE2E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjG,EAAAC,EAAAC,cAACgG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0565b589.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, TextField, Button, withStyles } from '@material-ui/core';\n\nconst styles = theme => ({\n  button: {\n    paddingTop: 4,\n    float: 'right'\n  }\n});\n\nclass ExpenseCreator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newExpenseName: '',\n      newExpenseQuantity: 0,\n      newExpenseCost: 0\n    };\n  }\n  handleInput = key => event => {\n    this.setState({ [key]: event.target.value });\n  };\n  handleExpenseAdded = () => {\n    const { newExpenseName, newExpenseCost, newExpenseQuantity } = this.state;\n    const { onAddExpense } = this.props;\n    if (onAddExpense) {\n      onAddExpense({\n        name: newExpenseName,\n        cost: newExpenseCost,\n        quantity: newExpenseQuantity\n      });\n    }\n    this.setState({\n      newExpenseCost: 0,\n      newExpenseName: '',\n      newExpenseQuantity: 0\n    });\n  };\n  render() {\n    const { newExpenseName, newExpenseCost, newExpenseQuantity } = this.state;\n    const { classes, showCreateExpenseInput } = this.props;\n    return (\n      <Collapse in={showCreateExpenseInput}>\n        <TextField\n          fullWidth\n          label=\"Expense Name\"\n          placeholder=\"PAX Badges\"\n          value={newExpenseName}\n          onChange={this.handleInput('newExpenseName')}\n          margin=\"normal\"\n        />\n        <TextField\n          fullWidth\n          label=\"Quantity\"\n          type=\"number\"\n          onChange={this.handleInput('newExpenseQuantity')}\n          value={newExpenseQuantity}\n          margin=\"normal\"\n        />\n        <TextField\n          fullWidth\n          label=\"Cost\"\n          type=\"number\"\n          onChange={this.handleInput('newExpenseCost')}\n          value={newExpenseCost}\n          margin=\"normal\"\n        />\n        <div className={classes.button}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={this.handleExpenseAdded}\n          >\n            Add Expense\n          </Button>\n        </div>\n      </Collapse>\n    );\n  }\n}\n\nexport default withStyles(styles)(ExpenseCreator);\n","import React, { Component } from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  TextField,\n  Button,\n  withStyles,\n  Collapse,\n  CardActions,\n  Avatar,\n  IconButton\n} from '@material-ui/core';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport AttachMoneyOutlined from '@material-ui/icons/AttachMoney';\n\n/**\n * To do:\n * hook up to real data\n * add snackbar notification\n */\n\nconst styles = theme => ({\n  button: {\n    paddingTop: 12\n  },\n  input: {\n    paddingTop: 8\n  },\n  actions: {\n    float: 'right'\n  }\n});\n\nclass Expense extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showClaimInput: false,\n      showClaims: false,\n      newClaimMessage: '',\n      newClaimPayment: 0,\n      newClaimQuantity: 0,\n      remainingQuantity: props.quantity\n    };\n  }\n  handleInput = key => event => {\n    this.setState({ [key]: event.target.value });\n  };\n  toggleShowClaimInput = () => {\n    this.setState(prevState => ({ showClaimInput: !prevState.showClaimInput }));\n  };\n  toggleShowClaimInput = () => {\n    this.setState(prevState => ({ showClaimInput: !prevState.showClaimInput }));\n  };\n  toggle = key => () => {\n    this.setState(prevState => ({ [key]: !prevState[key] }));\n  };\n  addNewClaim = () => {\n    const { onClaimAdded } = this.props;\n    const {\n      newClaimMessage,\n      newClaimPayment,\n      newClaimQuantity,\n      remainingQuantity\n    } = this.state;\n\n    if (onClaimAdded) {\n      onClaimAdded({\n        message: newClaimMessage,\n        payment: newClaimPayment,\n        claimQuantity: newClaimQuantity,\n        claimedBy: 'gret'\n      });\n    }\n\n    this.setState({\n      newClaimMessage: '',\n      newClaimPayment: 0,\n      newClaimQuantity: 0,\n      showClaimInput: false,\n      remainingQuantity: remainingQuantity - newClaimQuantity\n    });\n  };\n  render() {\n    const {\n      name,\n      cost,\n      quantity,\n      claims,\n      createdBy,\n      classes,\n      remainingBalance\n    } = this.props;\n    const {\n      newClaimMessage,\n      newClaimPayment,\n      newClaimQuantity,\n      showClaimInput,\n      showClaims,\n      remainingQuantity\n    } = this.state;\n\n    return (\n      <Card>\n        <CardHeader\n          onClick={this.toggle('showClaimInput')}\n          title={name}\n          subheader={createdBy}\n          avatar={<Avatar />}\n        />\n        <CardContent>\n          <div>Total cost: ${cost}</div>\n          <div>Remaining cost: ${remainingBalance}</div>\n          <div>Total quantity: {quantity}</div>\n          <div>Remaining quantity: {remainingQuantity}</div>\n        </CardContent>\n        <Collapse in={showClaims}>\n          <CardContent onClick={this.toggle('showClaims')}>\n            <div style={{ padding: 4 }}>\n              {claims.map((claim, i) => (\n                <div key={i}>\n                  {claim.claimQuantity} {claim.message} ${claim.payment} -{' '}\n                  {claim.claimedBy}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Collapse>\n        <Collapse in={showClaimInput}>\n          <CardContent>\n            <div className={classes.input}>\n              <TextField\n                fullWidth\n                label=\"Quantity\"\n                onChange={this.handleInput('newClaimQuantity')}\n                value={newClaimQuantity}\n                type=\"number\"\n              />\n            </div>\n            <div className={classes.input}>\n              <TextField\n                fullWidth\n                label=\"Message\"\n                onChange={this.handleInput('newClaimMessage')}\n                value={newClaimMessage}\n                placeholder=\"Badge me bro\"\n              />\n            </div>\n            <div className={classes.input}>\n              <TextField\n                fullWidth\n                label=\"Payment\"\n                onChange={this.handleInput('newClaimPayment')}\n                value={newClaimPayment}\n                type=\"number\"\n              />\n            </div>\n            <div className={classes.button}>\n              <Button fullWidth variant=\"outlined\" onClick={this.addNewClaim}>\n                Claim\n              </Button>\n            </div>\n          </CardContent>\n        </Collapse>\n        <CardActions className={classes.actions}>\n          {!showClaimInput && !showClaims && (\n            <div>\n              <IconButton onClick={this.toggle('showClaims')}>\n                <AssignmentIcon />\n              </IconButton>\n              <IconButton onClick={this.toggle('showClaimInput')}>\n                <AttachMoneyOutlined />\n              </IconButton>\n            </div>\n          )}\n        </CardActions>\n      </Card>\n    );\n  }\n}\n\nexport default withStyles(styles)(Expense);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Expense from './Expense';\n\nconst styles = theme => ({\n  expenseContainer: {\n    paddingTop: 12\n  }\n});\n\nclass ExpenseList extends Component {\n  handleClaimAdded = (expense, index) => claim => {\n    const { onAddNewClaim } = this.props;\n    if (onAddNewClaim) {\n      onAddNewClaim(expense, index, claim);\n    }\n  };\n  render() {\n    const { expenses, classes } = this.props;\n    return (\n      <div>\n        {expenses.map((expense, i) => (\n          <div key={i} className={classes.expenseContainer}>\n            <Expense\n              onClaimAdded={this.handleClaimAdded(expense, i)}\n              {...expense}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(ExpenseList);\n","import React, { Component } from 'react';\nimport { AppBar, Toolbar, Fab } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport AttachMoneyOutlined from '@material-ui/icons/AttachMoney';\nimport ExpenseCreator from './ExpenseCreator';\nimport ExpensesList from './ExpensesList';\n\n/**\n * To do\n * figure out a way to handle different types of expenses\n * hotels, airbnbs, daily badges etc\n */\n\nconst styles = theme => ({\n  container: {\n    paddingTop: 4,\n    paddingBottom: 4,\n    paddingLeft: 12,\n    paddingRight: 12\n  },\n  button: {\n    paddingTop: 4,\n    float: 'right'\n  },\n  expenseContainer: {\n    paddingTop: 12\n  },\n  appBar: {\n    top: 'auto',\n    bottom: 0\n  },\n  toolbar: {\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  fabButton: {\n    position: 'absolute',\n    zIndex: 1,\n    top: -30,\n    left: 0,\n    right: 0,\n    margin: '0 auto'\n  }\n});\n\nclass ExpensesPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showCreateExpenseInput: false,\n      expenses: []\n    };\n  }\n  toggle = key => () => {\n    this.setState(prevState => ({ [key]: !prevState[key] }));\n  };\n  addNewExpense = ({ cost, name, quantity }) => {\n    const { expenses } = this.state;\n    this.setState({\n      showCreateExpenseInput: false,\n      expenses: [\n        ...expenses,\n        {\n          createdBy: 'gret',\n          cost,\n          name,\n          remainingBalance: cost,\n          quantity,\n          claims: []\n        }\n      ]\n    });\n  };\n  addNewClaim = (expense, index, claim) => {\n    const { expenses } = this.state;\n\n    const updatedClaims = [...expense.claims, claim];\n\n    const updatedExpense = {\n      ...expense,\n      remainingBalance: expense.remainingBalance - claim.payment,\n      claims: updatedClaims\n    };\n\n    expenses.splice(index, 1, updatedExpense);\n    this.setState({\n      expenses\n    });\n  };\n  render() {\n    const { classes } = this.props;\n    const { expenses, showCreateExpenseInput } = this.state;\n    return (\n      <div className={classes.container}>\n        <ExpenseCreator\n          onAddExpense={this.addNewExpense}\n          showCreateExpenseInput={showCreateExpenseInput}\n        />\n        <ExpensesList onAddNewClaim={this.addNewClaim} expenses={expenses} />\n        <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n          <Toolbar className={classes.toolbar}>\n            <Fab\n              color=\"secondary\"\n              aria-label=\"Add\"\n              className={classes.fabButton}\n              onClick={this.toggle('showCreateExpenseInput')}\n            >\n              <AttachMoneyOutlined />\n            </Fab>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(ExpensesPage);\n","import React, { Component } from 'react';\nimport ExpensesPage from './ExpensesPage';\n\n/**\n * To do\n * figure out a way to handle different types of expenses\n * hotels, airbnbs, daily badges etc\n */\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <ExpensesPage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}